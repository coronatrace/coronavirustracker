type Contact {
  id: ID! # Sort key (needed to make the primary key unique)
  userId: ID! # Partition key
  contactUserId: ID!
  contactTimestamp: AWSTimestamp!
  createdTimestamp: AWSTimestamp!
  expirationTimestamp: AWSTimestamp # For Dynamodb time to live (TTL)
}

type Infection {
  id: ID! # Primary key (partition and sort)
  userId: ID! # GSI
  infectedTimestamp: AWSTimestamp! # Sort key
  fromInfectionId: ID! # The id which caused this - if it is invalidated then this infection can also be invalidated
  detectionSource: DetectionSource!
  createdTimestamp: AWSTimestamp!
  deletedTimestamp: AWSTimestamp # Tombstone
}

type Query {
  getInfection(id: ID!): Infection
  getInfections(userId: ID!): [Infection]
}

input ContactInput {
  id: ID!
  userId: ID!
  contactUserId: ID!
  contactTimestamp: AWSTimestamp!
}

input InfectionInput {
  userId: ID!
  infectedTimestamp: AWSTimestamp!
  detectionSource: DetectionSourceCreate!
}

type Mutation {
  createContact(input: ContactInput): Contact
  createInfection(input: InfectionInput): Infection
  deleteInfection(id: ID!): Infection
}

enum DetectionSource {
  test
  symptoms
  contact
}

enum DetectionSourceCreate {
  test
  symptoms
}
